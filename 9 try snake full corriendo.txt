using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

struct Jugador
{
    public string Nombre;
    public int Puntaje;
    public int CasillasRecorridas;
}

class Program
{
    static List<Jugador> jugadores = new List<Jugador>();
    static string rutaArchivoPuntajes = @"C:\\Users\\VICTOR\\OneDrive - Universidad Privada Domingo Savio\\Escritorio\\Progra II\\Proyecto snake\\recorrido_serpiente.csv";


    static void Main(string[] args)
    {
        CargarPuntajesCSV(); // Cargar puntajes guardados al iniciar el programa

        while (true)
        {
            MostrarMenu();
            Console.ReadKey(); // Esperar a que el usuario vea el mensaje antes de continuar
            Console.Clear();
        }
    }

    static void MostrarMenu()
    {
        Console.WriteLine("1. Ingresar nuevo jugador");
        Console.WriteLine("2. Jugar");
        Console.WriteLine("3. Ver puntajes totales");
        Console.Write("Seleccione una opción: ");

        if (!int.TryParse(Console.ReadLine(), out int opcion))
        {
            Console.WriteLine("Valor no válido. Por favor, ingrese un número del 1 al 3.");
            return;
        }

        switch (opcion)
        {
            case 1:
                IngresarNuevoJugador();
                break;
            case 2:
                if (jugadores.Any())
                {
                    Console.WriteLine($"¡Bienvenido, {jugadores.Last().Nombre}! ¡Buena suerte!");
                    Jugar();
                }
                else
                {
                    Console.WriteLine("Primero ingrese un nuevo jugador.");
                }
                break;
            case 3:
                MostrarPuntajes();
                break;
            default:
                Console.WriteLine("Opción no válida. Inténtelo de nuevo.");
                break;
        }
    }

    static void IngresarNuevoJugador()
    {
        Console.Write("\nIngrese el nombre del nuevo jugador: ");
        string nombre = Console.ReadLine();
        jugadores.Add(new Jugador { Nombre = nombre });
        Console.WriteLine("Jugador ingresado con éxito.");

        // Iniciar el juego automáticamente para el nuevo jugador
        Jugar();
    }

    //se icicializa para un nuevo jugador
        static void InicializarJuego()
    {
        posicionX = tamañoX / 2;
        posicionY = tamañoY / 2;
        puntoPosicionX = tamañoX / 2;
        puntoPosicionY = tamañoY / 2;
        directionX = 1;
        directionY = 0;
        snakeLength = 1;
        cola.Clear();
        posicionesVisitadas.Clear();
    }


    static void Jugar()
    {
        InicializarJuego();

        while (true)
        {
            DibujarTablero();
            MoverSerpiente();
            InteractuarUsuario();
            System.Threading.Thread.Sleep(10); // Ajusta la velocidad del juego

            // Verificar colisión con la cola
            if (cola.Skip(1).Contains((posicionX, posicionY)))
            {
                MostrarResultadoFinal();
                break; // Salir del ciclo si hay colisión
            }
        }

        // Asignar el puntaje al jugador
        if (jugadores.Any())
        {
            Jugador ultimoJugador = jugadores[jugadores.Count - 1]; // Acceder al último jugador
            ultimoJugador.Puntaje = cola.Count; // Asignar el puntaje obtenido al jugador
            ultimoJugador.CasillasRecorridas = posicionesVisitadas.Count();
        }

        GuardarPuntajesCSV();
        Console.WriteLine("¡Colisión! Presione cualquier tecla para continuar.");
    }




    static void MostrarPuntajes()
    {
        if (jugadores.Any())
        {
            Console.WriteLine("Puntajes generales:");
            foreach (var jugador in jugadores)
            {
                Console.WriteLine($"Nombre: {jugador.Nombre}, Puntaje: {jugador.Puntaje}, Casillas recorridas: {jugador.CasillasRecorridas}");
            }
        }
        else
        {
            Console.WriteLine("No hay puntajes que mostrar.");
        }
    }

    static void CargarPuntajesCSV()
    {
        if (File.Exists(rutaArchivoPuntajes))
        {
            using (StreamReader reader = new StreamReader(rutaArchivoPuntajes))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    string[] datosJugador = line.Split(',');
                    string nombre = datosJugador[0];
                    int puntaje = int.Parse(datosJugador[1]);
                    int casillasRecorridas = int.Parse(datosJugador[2]);
                    jugadores.Add(new Jugador { Nombre = nombre, Puntaje = puntaje, CasillasRecorridas = casillasRecorridas });
                }
            }
        }
        else
        {
            Console.WriteLine("No se encontró el archivo de puntajes. Se creará uno nuevo.");
        }
    }

    static void GuardarPuntajesCSV()
    {
        using (StreamWriter writer = new StreamWriter(rutaArchivoPuntajes, true)) // Cambia 'false' por 'true'
        {
            foreach (var jugador in jugadores)
            {
                writer.WriteLine($"{jugador.Nombre},{jugador.Puntaje},{jugador.CasillasRecorridas}");
            }
        }
    }





    ////////////////////////////////////////////////////////////////////////////////////////////////////

    static int tamañoX = 25;
    static int tamañoY = 25;
    static int posicionX = tamañoX / 2;
    static int posicionY = tamañoY / 2;
    static int puntoPosicionX = tamañoX / 2;
    static int puntoPosicionY = tamañoY / 2;
    static int directionX = 1;
    static int directionY = 0;
    static int snakeLength = 1;
    static List<(int x, int y)> cola = new List<(int, int)>();
    static List<(int x, int y)> posicionesVisitadas = new List<(int, int)>();


    static void DibujarTablero()
    {
        Console.Clear();
        for (int y = 0; y < tamañoY; y++)
        {
            for (int x = 0; x < tamañoX; x++)
            {
                if (x == puntoPosicionX && y == puntoPosicionY)
                {
                    Console.Write("+");
                }
                else if (x == posicionX && y == posicionY)
                {
                    Console.Write("@");
                }
                else if (cola.Contains((x, y)))
                {
                    if (cola.IndexOf((x, y)) == 0)
                    {
                        Console.Write("o"); // Cuello de la serpiente
                    }
                    else
                    {
                        Console.Write("o"); // Cuerpo de la serpiente
                    }
                }
                else
                {
                    Console.Write(" ");
                }
            }
            Console.WriteLine();
        }
    }

    static void MoverSerpiente()
    {
        //guarda las posiciones en una lista
        posicionesVisitadas.Insert(0, (posicionX, posicionY));

        // Actualiza las coordenadas de la serpiente (cabeza y cola)
        cola.Insert(0, (posicionX, posicionY));
        posicionX += directionX;
        posicionY += directionY;

        // Si la cola es más larga que la longitud de la serpiente, elimina el último segmento
        if (cola.Count > snakeLength)
        {
            cola.RemoveAt(cola.Count - 1);
        }

        // Verifica si la serpiente ha alcanzado el punto "+"
        if (posicionX == puntoPosicionX && posicionY == puntoPosicionY)
        {
            snakeLength++; // Aumenta la longitud de la serpiente
            GenerarNuevoPunto(); // Genera un nuevo punto "+"
        }

        // modulo por que 24 mod 25 el modulo es 24 dejando la nueva posicion 24
        if (posicionX >= tamañoX || posicionX < 0)
        {
            posicionX = (posicionX + tamañoX) % tamañoX;
        }
        if (posicionY >= tamañoY || posicionY < 0)
        {
            posicionY = (posicionY + tamañoY) % tamañoY;
        }
    }

    static void InteractuarUsuario()
    {
        if (Console.KeyAvailable)
        {
            ConsoleKeyInfo tecla = Console.ReadKey(true);
            switch (tecla.Key)
            {
                case ConsoleKey.D:
                    directionX = 1; // Mover a la derecha
                    directionY = 0;
                    break;
                case ConsoleKey.A:
                    directionX = -1; // Mover a la izquierda
                    directionY = 0;
                    break;
                case ConsoleKey.W:
                    directionX = 0;
                    directionY = -1; // Mover hacia arriba
                    break;
                case ConsoleKey.S:
                    directionX = 0;
                    directionY = 1; // Mover hacia abajo
                    break;
                case ConsoleKey.Q:
                    Environment.Exit(0);
                    break;
            }
        }
    }

    static Random numRandom = new Random();
    static void GenerarNuevoPunto()
    {
        puntoPosicionX = numRandom.Next(0, tamañoX);
        puntoPosicionY = numRandom.Next(0, tamañoY);
    }

    static void MostrarResultadoFinal()
    {
        Console.Clear();
        Console.WriteLine("╔═════════════════════════════════════════════════════════════════════╗");
        Console.WriteLine("║              ¡La serpiente ha chocado consigo misma!                ║");
        Console.WriteLine("║                                                                     ║");
        Console.WriteLine("║                       Puntos: " + cola.Count + "                                     ║");
        Console.WriteLine("║                                                                     ║");
        Console.WriteLine("║          Segmentos recorridos: " + posicionesVisitadas.Count + "                            ║");
        Console.WriteLine("║                                                                     ║");
        Console.WriteLine("║               Presiona cualquier tecla para continuar.              ║");
        Console.WriteLine("║                                                                     ║");
        Console.WriteLine("╚═════════════════════════════════════════════════════════════════════╝");
        Console.ReadKey();
        MostrarMenu(); // Después de mostrar el resultado final, regresa al menú principal
    }

}